#!/usr/bin/env bash

declare -i y=$(tput lines)
declare -i x=$(tput cols)

if [ "$#" -ne 2 ]; then
	echo "usage: ./random_palette_gen -n <number of colors>"; exit 1;
fi

while getopts n: flag
do
    case "${flag}" in
        n) n_colors=${OPTARG};;
    esac
done

if [[ $n_colors -gt $x ]]; then
	echo "error: number of colors must be less than "$x
	exit 1
fi



repeatPrint(){
    local r=$1
    local g=$2
    local b=$3     
    declare -i times=$4

    for i in $(seq 1 $times); do
	echo -en "\033[48;2;${r};${g};${b}m \033[0m"
    done
}


declare -i times=$((x/n_colors))

declare -a colors=()

for i in $(seq 1 $(( n_colors * 3 ))); do
	colors+=($(($RANDOM % 255)))
done

clear

declare -i dif=0
declare -i as=${#colors}

for l in $(seq 1 $y); do
    dif=0
	for nr in $(seq 1 $n_colors); do
		repeatPrint ${colors[((nr+dif-1))]} ${colors[((nr+dif))]} ${colors[((nr+dif+1))]} $times
        ((dif+=2))
	done
echo
done

#dont show rgb values: they dont fit
[[ $times -lt 13 ]] && exit 0


declare -i my=$((y/2))

tput cup $my 0
dif=0

for nr in $(seq 1 $n_colors); do

    r=${colors[((nr+dif-1))]}
    g=${colors[((nr+dif))]}
    b=${colors[((nr+dif+1))]}


    #oposite colors for the leters
    fgR=$((255-r))
    fgG=$((255-g))
    fgB=$((255-b))

    tput cup $my $(((times*nr)-times/2 -6))
    echo -en "\033[38;2;${fgR};${fgG};${fgB}m\033[48;2;${r};${g};${b}m"
    printf "%03d %03d %03d" $r $g $b
    echo -en "\033[0"

    ((dif+=2))

done


 #return cursor to last line
tput cup $y 1
echo -e "\033[0m"
